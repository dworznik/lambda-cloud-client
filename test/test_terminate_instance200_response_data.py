# coding: utf-8

"""
    Lambda Cloud API

    API for interacting with the Lambda GPU Cloud  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import lambda_cloud_client
from lambda_cloud_client.models.terminate_instance200_response_data import TerminateInstance200ResponseData  # noqa: E501
from lambda_cloud_client.rest import ApiException

class TestTerminateInstance200ResponseData(unittest.TestCase):
    """TerminateInstance200ResponseData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TerminateInstance200ResponseData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TerminateInstance200ResponseData`
        """
        model = lambda_cloud_client.models.terminate_instance200_response_data.TerminateInstance200ResponseData()  # noqa: E501
        if include_optional :
            return TerminateInstance200ResponseData(
                terminated_instances = [
                    lambda_cloud_client.models.instance.instance(
                        id = '0920582c7ff041399e34823a0be62549', 
                        name = 'training-node-1', 
                        ip = '10.10.10.1', 
                        status = 'active', 
                        ssh_key_names = [
                            'macbook-pro'
                            ], 
                        file_system_names = [
                            'shared-fs'
                            ], 
                        region = lambda_cloud_client.models.region.region(
                            name = 'us-tx-1', 
                            description = 'Austin, Texas', ), 
                        instance_type = lambda_cloud_client.models.instance_type.instanceType(
                            name = 'gpu_1x_a100', 
                            description = '1x RTX A100 (24 GB)', 
                            price_cents_per_hour = 110, 
                            specs = lambda_cloud_client.models.instance_type_specs.instanceType_specs(
                                vcpus = 24, 
                                memory_gib = 800, 
                                storage_gib = 512, ), ), 
                        hostname = '10-0-8-196.cloud.lambdalabs.com', 
                        jupyter_token = '53968f128c4a4489b688c2c0a181d083', 
                        jupyter_url = 'https://jupyter-3ac4c5c6-9026-47d2-9a33-71efccbcd0ee.lambdaspaces.com/?token=53968f128c4a4489b688c2c0a181d083', )
                    ]
            )
        else :
            return TerminateInstance200ResponseData(
                terminated_instances = [
                    lambda_cloud_client.models.instance.instance(
                        id = '0920582c7ff041399e34823a0be62549', 
                        name = 'training-node-1', 
                        ip = '10.10.10.1', 
                        status = 'active', 
                        ssh_key_names = [
                            'macbook-pro'
                            ], 
                        file_system_names = [
                            'shared-fs'
                            ], 
                        region = lambda_cloud_client.models.region.region(
                            name = 'us-tx-1', 
                            description = 'Austin, Texas', ), 
                        instance_type = lambda_cloud_client.models.instance_type.instanceType(
                            name = 'gpu_1x_a100', 
                            description = '1x RTX A100 (24 GB)', 
                            price_cents_per_hour = 110, 
                            specs = lambda_cloud_client.models.instance_type_specs.instanceType_specs(
                                vcpus = 24, 
                                memory_gib = 800, 
                                storage_gib = 512, ), ), 
                        hostname = '10-0-8-196.cloud.lambdalabs.com', 
                        jupyter_token = '53968f128c4a4489b688c2c0a181d083', 
                        jupyter_url = 'https://jupyter-3ac4c5c6-9026-47d2-9a33-71efccbcd0ee.lambdaspaces.com/?token=53968f128c4a4489b688c2c0a181d083', )
                    ],
        )
        """

    def testTerminateInstance200ResponseData(self):
        """Test TerminateInstance200ResponseData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
